USB CCID IFD Handler
====================

  This package provides the source code for a generic USB CCID
(Chip/Smart Card Interface Devices) driver. See [1] for the USB CCID
specifications from the USB working group.


Author:
=======

- Ludovic Rousseau <ludovic.rousseau@free.fr>


Supported CCID readers:
=======================

(in alphabetical order)
- Gemplus GemPC 433 SL [2]
- Gemplus GemPC Key [3]
- Gemplus GemPC Twin [4]
- OmniKey CardMan 3121 [5]
- SCM Micro SCR 331 [6]
- SCM Micro SCR 335 [7]


Unsupported CCID readers:
=========================

- LTC31 from C3PO [8]
  Communication errors between the card and the reader. Some cards can't
  send an ATR.  I have the exact same symptoms with the Windows driver
  provided by C3PO.


Supported operating systems:
============================

- GNU/Linux (libusb 0.1.7)
- MacOS X/Darwin (libusb 0.1.8beta, CVS snapshot. See "Known problems")
  to libusb)


Known problems:
===============

All platforms
    T=1 and TPDU
    """"""""""""
      I do not yet included support of T=1 cards when the reader is in
      TPDU mode.
      If you have a T=1 card I recommand you to use a reader working in
      APDU mode. T=1 and TPDU will be supported in a future version of
      the driver.

    readers enumeration
    """""""""""""""""""
      You may have wrong reader identification if you connect two or
      more reader at the exact same time.

      The daemon pcscd and the CCID driver do not list connected readers
      in the same order. The driver has no way to know which reader has
      been detected as a new reader by pcscd.
      
      So if you plug two readers at the same time (for example if you
      start pcscd with two readers connected or if you plug a USB hub
      with two readers on the hub) you may have this (with two readers
      foo and bar):
      - pcscd scans the USB bus and finds a new CCID reader foo and
        calls the driver
      - the CCID driver scan the USB bus and finds a new different
        reader bar
      - pcscd continues scanning the USB bus and finds the second reader
        bar and calls the driver
      - the CCID driver scan the USB bus and finds an unused reader foo.

        Now the reader foo will be called bar by pcscd and bar will be
        called foo. This may not be a problem if the two readers have
        the same name. But it is strange to insert a card in the
        physical reader foo and see pcscd detect the card insertion in
        the reader he calls bar.
        
        The solution is to use IFDHCreateChannelByName() instead of
        IFDHCreateChannel() and specify the USB device to use. But pcscd
        does not implement IFDHCreateChannelByName() yet. Maybe in the
        future.
        
        Another solution is to plug readers one after the other and not
        at the same time.

MacOS X/Darwin
    hotplug
    """""""
      Due to libusb work in progress the driver may crash on a reader
      insertion after a few insert/remove actions.
      So if your reader is always connected you should not have
      problems.
      A new version of libusb should fix this bug

*BSD
    libusb
    """"""
      The libusb does not yet support USB interrupt endpoints. You will
      notice that the driver will stop working as soon as you insert a
      card in the reader.
      A new version of libusb should fix this bug.


Licence:
========

  This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

  This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

  You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA


History:
========

0.3.1 - 23 September 2003, Ludovic Rouseau
    - add --enable-multi-thread (enabled by default) for thread safe
      support an APDU multiplexing. You will need pcsc-lite-1.2.0-rc3 or
      above to use this feature.
    - add --enable-libusb=PATH option is your libusb is not installed in
      /usr or /usr/local
    - honor DESTDIR in install rules (closes [ #300110 ]). Thanks to
      Ville Skyttä for the patch.
    - src/ccid.c: do not switch the GemPC Key and GemPC Twin in APDU
      mode since it also swicth in EMV mode and may not work with non
      EMV cards
    - src/ccid_serial.c: complete reimplementation of the Twin serial
      protocol using a finite state automata (code much simpler)

0.3.0 - 10 September 2003, Ludovic Rousseau
    - support of GemPC Twin connected to a serial port. Thanks to Niki
      W. Waibel for a working prototype.
    - support of auto voltage at power up if the reader support it
      instead of forcing a 5V in all cases.
    - support of APDU mode instead of just TPDU if the reader support
      it. Thanks to Jean-Luc Giraud for the idea and inspiration I got
      from his "concurrent" driver.
    - support of "time request" from the card.
    - parse: new indentation for more readability of supported features.
    - switch the GemPC Key and GemPC Twin in APDU mode since they
      support it but do not announce it in the dwFeatures.
    - new build process using autoconf/automake.

0.2.0 - 26 August 2003, Ludovic Rousseau
    - Works under MacOS X
    - Info.plist: use an <array></array> for the alias enumeration
    - Makefile rework for *BSD and MacOS X

0.1.0 - 13 August 2003, Ludovic Rousseau
    - First public release


Bibliography:
=============

[1] http://www.usb.org/developers/devclass_docs/ccid_classspec_1_00a.pdf
[2] http://www.gemplus.com/products/gempc433/
[3] http://www.gemplus.com/products/gempckey/
[4] http://www.gemplus.com/products/gempctwin/
[5] http://www.omnikey.com/en/produkt_details.php3?produkt=1&variante=47
[6] http://www.scmmicro.com/security/SCR331.html
[7] http://www.scmmicro.com/security/SCR335.html
[8] http://www.c3po.es/pcsc.htm

$Id$

 vim:ts=20
