dnl Process this file with autoconf to produce a configure script.
dnl You may need to use autoconf 2.56 or newer

dnl $Id$

AC_INIT(src/winscard.h)
AC_CONFIG_AUX_DIR(build)

dnl Default install dir
AC_PREFIX_DEFAULT(/usr/local)

dnl Automake boilerplate.
AC_CANONICAL_HOST

dnl Every other copy of the package version number gets its value from here
AM_INIT_AUTOMAKE(pcsc-lite, 1.2.0-rc2)

dnl create a config.h file (Automake will add -DHAVE_CONFIG_H)
AM_CONFIG_HEADER(config.h)

dnl Options
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S
AM_PROG_LEX

dnl Special check for pthread support.
ACX_PTHREAD(
[
 AC_DEFINE(HAVE_PTHREAD, 1,
  [Define if you have POSIX threads libraries and header files.])
], [
 AC_MSG_ERROR([POSIX thread support required])
])

AC_CHECK_FUNCS(daemon)
AC_CHECK_FUNCS(getopt_long)
AC_CHECK_FUNCS(snprintf vsnprintf)
AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(strncpy)

AC_CHECK_HEADERS(getopt.h)
AC_CHECK_HEADERS(errno.h)

dnl Add libtool support.
AM_PROG_LIBTOOL

dnl Automatically update the libtool script if it becomes out-of-date.
AC_SUBST(LIBTOOL_DEPS)

dnl Checks for header files.
AC_HEADER_STDC
#AC_HEADER_SYS_WAIT
#AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
#AC_C_CONST
#AC_HEADER_TIME

dnl Checks for library functions.
#AC_FUNC_MMAP
#AC_TYPE_SIGNAL
#AC_CHECK_FUNCS(gettimeofday strdup strtoul)

dnl Use 'uname' output as an architecture define
uname=`uname`
case "$uname" in
Darwin)
	uname=MacOS
	;;
esac
AC_DEFINE_UNQUOTED(PCSC_ARCH, "$uname", [PC/SC target architecture])

dnl check if libusb is available
AC_CHECK_LIB(usb, usb_init, [ use_libusb=true ], [ use_libusb=false ])
AC_CHECK_HEADERS(usb.h, [ use_libusb=true ], [ use_libusb=false ])

dnl --enable-libusb=DIR
AC_ARG_ENABLE(libusb, [  --enable-libusb=PATH    enable USB hotplug using libusb],
	[
		case ${enableval} in
			"" | "yes" | "YES")
				;;
			"no" | "NO")
				use_libusb=false
				;;
			*)
				use_libusb=false
				libusb_prefix=${enableval}
				AC_CHECK_LIB(usb, usb_init, [ use_libusb=true ], [ use_libusb=false ], "-L${libusb_prefix}/lib")
				AC_CHECK_HEADERS(${libusb_prefix}/include/usb.h, [ use_libusb=true ], [ use_libusb=false ])
				if test x$use_libusb = xtrue; then
					CPPFLAGS="$CPPFLAGS -I${libusb_prefix}/include"
					LDFLAGS="$LDFLAGS -L${libusb_prefix}/lib"
				fi
				;;
		esac
	]
)

AC_MSG_RESULT([enable libusb support         : $use_libusb])

AM_CONDITIONAL(PCSC_USE_LIBUSB, test x$use_libusb = xtrue)


dnl --enable-threadsafe
AC_ARG_ENABLE(threadsafe,
[  --enable-threadsafe     enable client side thread safety.],
[case "${enableval}" in
  yes)	threadsafe=true ;;
  no)	threadsafe=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-threadsafe]) ;;
 esac], [threadsafe=true])

AC_MSG_RESULT([enable threadsafe client      : $threadsafe])

AM_CONDITIONAL(PCSC_THR_SAFE, test x$threadsafe = xtrue)

dnl --enable-usbdropdir=DIR
AC_ARG_ENABLE(usbdropdir,
[  --enable-usbdropdir=DIR directory containing USB drivers                                                (default /usr/local/pcsc/drivers/)],
[usbdropdir="${enableval}"], [usbdropdir=false])
if test x${usbdropdir} = xfalse ; then
	usbdropdir="/usr/local/pcsc/drivers/"
fi
AC_MSG_RESULT([enable USB drop directory     : $usbdropdir])
AC_DEFINE_UNQUOTED(PCSCLITE_HP_DROPDIR, "$usbdropdir", [directory containing USB drivers])

AC_ARG_ENABLE(debug,
[  --enable-debug          enable debug messages from pcscd.],
[ case "${enableval}" in
  yes)	
    debug=true ;;
  no)	
    debug=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
 esac], [debug=true])

AC_MSG_RESULT([enable debug messages         : $debug])

if test x${debug} = xtrue ; then
  AC_DEFINE(PCSC_DEBUG, 1, [enable full PCSC debug messaging.])
  AC_DEFINE(MSC_DEBUG, 1, [enable full musclecard debug messaging.])
fi


dnl --enable-debugatr
AC_ARG_ENABLE(debugatr,
[  --enable-debugatr       enable ATR debug messages from pcscd.],
[ case "${enableval}" in
  yes)	debugatr=true ;;
  no)	debugatr=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-debugatr]) ;;
esac], [debugatr=false])

AC_MSG_RESULT([enable ATR parsing messages   : $debugatr])

if test x${debugatr} = xtrue ; then
  AC_DEFINE(ATR_DEBUG, 1, [display ATR parsing debug messages.])
fi


dnl --enable-scf
AC_ARG_ENABLE(scf,
[  --enable-scf            use SCF for reader support.],
[ case "${enableval}" in
  yes)	scf=true ;;
  no)	scf=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-scf]) ;;
esac], [scf=false])

AC_MSG_RESULT([enable SCF reader support     : $scf])

AM_CONDITIONAL(MSC_ENABLE_SCF, test x$scf = xtrue)


dnl --disable-musclecard
AC_ARG_ENABLE(musclecard,
[  --disable-musclecard    musclecard framework disabled.],
[case "${enableval}" in
  yes)	musclecard=false ;;
  no)	musclecard=true ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --disable-musclecard]) ;;
 esac], [musclecard=false])

AC_MSG_RESULT([disable musclecard            : $musclecard])

AM_CONDITIONAL(MCARD_ENABLED, test x$musclecard = xfalse)


dnl --enable-muscledropdir=DIR
AC_ARG_ENABLE(muscledropdir,
[  --enable-muscledropdir=DIR directory containing MuscleCard bundles                                      (default /usr/local/pcsc/services/)],
[muscledropdir="${enableval}"], [muscledropdir=false])
if test x${muscledropdir} = xfalse ; then
	muscledropdir="/usr/local/pcsc/services/"
fi
AC_MSG_RESULT([enable MuscleCard bundles dir : $muscledropdir])
AC_DEFINE_UNQUOTED(MSC_SVC_DROPDIR, "$muscledropdir", [directory containing MuscleCard bundles])


dnl --enable-confdir=DIR
AC_ARG_ENABLE(confdir,
[  --enable-confdir=DIR    directory containing reader.conf (default /etc)],
[confdir="${enableval}"], [confdir=false])

if test x${confdir} != xfalse ; then
	AC_MSG_RESULT([enable confdir                : $confdir])

	AC_DEFINE_UNQUOTED(USE_READER_CONF, "$confdir", [directory containing reader.conf (default /etc)])
else
	AC_MSG_RESULT([enable confdir                : /etc (default)])
fi


dnl --enable-runpid=FILE
AC_ARG_ENABLE(runpid,
[  --enable-runpid=FILE    file containing pcscd pid],
[runpid="${enableval}"], [runpid=false])

AC_MSG_RESULT([enable runpid                 : $runpid])

if test x${runpid} != xfalse ; then
	AC_DEFINE_UNQUOTED(USE_RUN_PID, "$runpid", [file containing pcscd pid])
fi


dnl --enable-ipcdir=DIR
AC_ARG_ENABLE(ipcdir,
[  --enable-ipcdir=DIR     directory containing IPC files (default /var/run/)],
[ipcdir="${enableval}"], [ipcdir=false])

if test x${ipcdir} != xfalse ; then
	AC_MSG_RESULT([enable ipcdir                 : $ipcdir])

	AC_DEFINE_UNQUOTED(USE_IPCDIR, "$ipcdir", [directory containing IPC files (default /var/run/)])
else
	AC_MSG_RESULT([enable ipcdir                 : /var/run/ (default)])
fi


dnl warning about pthread
if test x${threadsafe} = xtrue ; then
  AC_MSG_RESULT([NOTE :: You must link pthread libraries with your app.])
  AC_DEFINE(USE_THREAD_SAFETY, 1, [enable client side thread safety.])
  LIBS="$PTHREAD_LIBS $LIBS"
  CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
  CC="$PTHREAD_CC"
fi

if test "$GCC" = "yes"; then
	CFLAGS="$CFLAGS -Wall -fno-common"
fi

dnl Setup dist stuff
AC_SUBST(ac_aux_dir)
AC_SUBST(muscledropdir)
AC_SUBST(usbdropdir)
AC_SUBST(confdir)
AC_SUBST(runpid)

dnl Write Makefiles.
AC_CONFIG_FILES(Makefile src/Makefile src/utils/Makefile etc/Makefile
				doc/Makefile doc/bundleTool.8 doc/pcscd.8
				doc/example/Makefile
				etc/reader.conf src/libpcsclite.pc)
AC_OUTPUT

